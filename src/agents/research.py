# src/agents/research.py
import logging

logger = logging.getLogger(__name__)

DESCRIPTION = """
  Du bist Informationssammler f√ºr NATO-Russland-Eskalationsanalyse.

  AUFTRAG: Erstelle einen STATUS-BERICHT zum aktuellen IST-Zustand (kein Verlauf). Du nutzt ausschlie√ülich Informationen, die innerhalb der letzten 30 Tage belegt sind. Falls keine frische Quelle
  existiert, markiere klar: ‚ÄûKein aktuelles Update gefunden ‚Äì letzter belegbarer Stand: <Datum> (Quelle)‚Äú.

  Jede Aussage muss Quelle + Datum + Link besitzen. Keine Annahmen, keine R√ºckgriffe auf √§ltere Berichte, keine Erfahrungswerte ohne Nachweis.

  FOKUS: Milit√§r, Diplomatie, Wirtschaft, Gesellschaft, Russische Staatsb√ºrger in Deutschland.
  """

INSTRUCTIONS = [
      """AKTUELLER STATUS ‚Äì 5 Dimensionen (Stand ‚â§30 Tage)

  Vor jedem Dimensionsteil:

  PFLICHTREGELN:
  - Nur Informationen mit Quelle ‚â§30 Tage verwenden.
  - Fehlt eine frische Quelle: ‚ÄûKein aktuelles Update gefunden ‚Äì letzter belegbarer Stand: <Datum> (Quelle)‚Äú.
  - Jeder Status-Punkt muss enthalten:
    üìç THEMA
    STATUS: [pr√§zise Beschreibung, keine Zahlen ohne Quelle]
    Quelle: [Medium, YYYY-MM-DD, URL]
    üîπ Westliche Darstellung: ‚Ä¶
    üîπ Russische Darstellung: ‚Ä¶ (oder ‚ÄûKeine Stellungnahme gefunden ‚Äì gepr√ºft am YYYY-MM-DD mit Suchbegriffen <‚Ä¶>‚Äú)
    ‚ö†Ô∏è Bewertung: [Beide best√§tigen / Widerspruch / Nur einseitig berichtet / Kein aktuelles Update]
    Stand: YYYY-MM-DD (Datum des Sachstands oder ‚Äûkein aktuelles Update‚Äú)

  F√ºr alle f√ºnf Dimensionen (Milit√§r, Diplomatie, Wirtschaft, Gesellschaft, Russen in DE) die wichtigsten Status-Punkte aufnehmen. Keine Beispiele aus fr√ºheren Berichten √ºbernehmen.
  """,
      """ANTI-BIAS-PROTOKOLL (ZWINGEND)

  Problem: Websuche priorisiert westliche Perspektiven.

  Suchstrategie f√ºr jeden Status-Punkt:
  1. Westliche Quelle recherchieren (Zeitfilter ‚â§30 Tage: z.‚ÄØB. ‚Äû<Thema> site:.de 2025‚Äú oder ‚Äû<Thema> last 7 days‚Äú).
  2. Russische Gegendarstellung aktiv suchen (deutsch/englisch/russisch, z.‚ÄØB. ‚Äû–†–æ—Å—Å–∏–π—Å–∫–∞—è –ø–æ–∑–∏—Ü–∏—è <Thema> 2025‚Äú, ‚ÄûRussian MoD statement <topic> October 2025‚Äú).
  3. Osteurop√§ische Perspektive pr√ºfen (Polen, Baltikum, Rum√§nien, Ukraine; Zeitfilter ‚â§30 Tage).
  4. Wenn nach gr√ºndlicher Suche keine Gegenseite gefunden wird, klar dokumentieren: ‚ÄûKeine Stellungnahme gefunden ‚Äì gepr√ºft am YYYY-MM-DD mit Suchbegriffe <‚Ä¶>‚Äú.

  Formulierungsregeln:
  - IMMER attributiv: ‚ÄûLaut [Quelle] ‚Ä¶‚Äú.
  - Zahlen nur mit konkreter Quelle + Datum.
  - Unterschiede nicht gl√§tten: Widerspr√ºche benennen (‚Äû‚ö†Ô∏è Widerspruch: NATO sagt X, Russland sagt Y‚Äú).
  - Keine √úbernahme von Platzhalterbeispielen oder alten Default-Werten.
  """,
      """OUTPUT-FORMAT & SIGNALE

  Ausgabe-Struktur:

  # ESKALATIONS-STATUS <Datum>

  ## 1. MILIT√ÑR ‚Äì Aktueller Stand
  (je Status-Punkt nach obigem Schema)

  ## 2. DIPLOMATIE ‚Äì Aktueller Stand
  - Enth√§lt Pflichtpunkt ‚ÄûSpannungsfall (GG Art. 80a) / Verteidigungsfall (GG Art. 115a) ‚Äì Status pr√ºfen‚Äú

  ## 3. WIRTSCHAFT ‚Äì Aktueller Stand
  ## 4. GESELLSCHAFT ‚Äì Aktueller Stand
  ## 5. RUSSEN IN DE ‚Äì Aktueller Stand

  ## KRITISCHE SIGNALE ‚Äì Aktuelle Lage
  - Pflichtthemen: Nuklearf√§hige Waffen-Diskussionen, NATO Artikel‚ÄØ4/5, Grenzschlie√üungen, milit√§rische Vorf√§lle, Spannungsfall/Verteidigungsfall.
  - F√ºr jedes Signal: gleiches Schema (STATUS, Quelle, Darstellungen, Bewertung, Stand).

  ## QUELLENABDECKUNG
  | Perspektive | Quelle | Datum | Link | Relevanz |
  Pflicht: Deutsch/West, Russisch, Osteuropa. Fehlende Perspektive => ‚Äû‚ö†Ô∏è Nicht abgedeckt ‚Äì erneute Recherche erforderlich‚Äú.

  WARNHINWEIS:
  - Keine aktuelle Quelle ‚Üí explizit benennen und als Blind Spot f√ºhren.
  - Keine zus√§tzlichen Kommentare au√üerhalb der Struktur.
  """
  ]


def build_research_prompt(date: str, rss_markdown: str) -> str:
    return f"""
  ESKALATIONS-STATUS {date}

  AUFTRAG:
  Erstelle den aktuellen STATUS-BERICHT zu NATO‚ÄìRussland-Spannungen in f√ºnf Dimensionen. Nutze nur Informationen, die mit Quellen (Datum ‚â§30 Tage) belegt sind. Fehlt ein Update, kennzeichne es offen.

  HINWEISE:
  - Jede Aussage ben√∂tigt Quelle + Datum + Link.
  - Kein R√ºckgriff auf √§ltere Beispielzahlen oder Vorwissen ohne frische Best√§tigung.
  - Dokumentiere fehlende Gegendarstellungen oder veraltete Daten als ‚ÄûKein aktuelles Update‚Äú + Blind Spot.
  - Suche aktiv nach russischen und osteurop√§ischen Perspektiven.

  RSS-KONTEXT (zur Orientierung):
  {rss_markdown}
  """


async def run_research(date: str, rss_markdown: str) -> str:
    """
    Run research agent using Grok/xAI with web search.

    Args:
        date: Current date string
        rss_markdown: RSS feed data in markdown format

    Returns:
        Research report in markdown format

    Raises:
        Exception: On agent execution failures
    """
    from agno.agent import Agent
    try:
        from .models import create_research_model
    except ImportError:
        from models import create_research_model

    # Build user prompt
    user_prompt = build_research_prompt(date, rss_markdown)

    # Create Grok model with extended search
    model = create_research_model(
        search_results=20,
        sources=[
            {"type": "web"},
            {"type": "x"},
            {"type": "news"}
        ]
    )

    # Create agent with description and instructions
    agent = Agent(
        model=model,
        description=DESCRIPTION,
        instructions=INSTRUCTIONS,
        markdown=True
    )

    try:
        # Run agent with user prompt
        run_response = agent.run(user_prompt)

        logger.info(f"Research agent completed successfully")

        # Extract content from Agno response
        return run_response.content

    except Exception as e:
        logger.error(f"Research agent failed: {e}")
        raise

async def main():
    """Test the research agent with empty RSS data."""
    from datetime import datetime
    import time

    # Test with empty RSS message
    current_date = datetime.now().strftime("%Y-%m-%d")
    empty_rss_message = "RSS-Feeds konnten nicht geladen werden und werden daher ignoriert."

    print(f"Research Agent Test - {current_date}")
    print(f"Testing with empty RSS data...")
    print("\n" + "="*50)

    try:
        # Execute agent and measure time
        print(f"üöÄ Starting research agent...")
        start_time = time.time()
        content = await run_research(current_date, empty_rss_message)
        end_time = time.time()
        execution_time = end_time - start_time

        print(f"\n‚úÖ Research completed:")
        print(f"‚è±Ô∏è Execution time: {execution_time:.1f} seconds")
        print(f"\nContent:\n{content}")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())