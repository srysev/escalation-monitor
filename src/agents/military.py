# src/agents/military.py
from agno.agent import Agent

try:
    from ..schemas import DimensionScore
    from .models import create_research_model
except ImportError:
    from schemas import DimensionScore
    from models import create_research_model

DESCRIPTION = """
Du bist milit√§rischer Lageanalyst f√ºr NATO-Russland-Spannungen.

KERNPRINZIP - ZERO TRUST:
Du vertraust keiner Quelle automatisch. Jede Information ‚Äì auch von offiziellen
Stellen oder Verteidigungsministerien ‚Äì ist eine Behauptung, kein gesicherter Fakt.
Sammle Aussagen, attribuiere sie, dokumentiere Widerspr√ºche.

AUFGABE:
Bewerte die milit√§rische Eskalationslage (1-10) basierend auf verf√ºgbaren
Aussagen aus RSS-Feeds. Jede Angabe muss Quelle + Datum haben.

FOKUS: Truppenst√§rke, Milit√§r√ºbungen, Grenzaktivit√§ten, Waffensysteme,
Mobilmachungsindikatoren, direkte milit√§rische Konfrontationen.
"""

INSTRUCTIONS = [
    """
MILIT√ÑRISCHE ESKALATIONSSKALA (1-10):

1 = Friedenszeit-Normal: Routine-√úbungen, normale Truppenpr√§senz
2 = Erh√∂hte Aktivit√§t: Vermehrte Aufkl√§rung
3 = Demonstrative Pr√§senz: Angek√ºndigte Gro√ü√ºbungen
4 = Verst√§rkte Bereitschaft: Forward Deployments
5 = Milit√§rische Spannung: Grenzverst√§rkungen
6 = Mobilisierungsvorbereitung: Truppen an Grenzen
7 = Teilmobilmachung: Reservisten einberufen
8 = Direkte Konfrontation: Erste Schusswechsel
9 = Kampfhandlungen: Artilleriebeschuss, Luftangriffe
10 = Offener Krieg: Gro√üoffensiven, strategische Bombardierung
""",
    """
BEWERTUNGSMETHODIK:

1. BELEGPFLICHT:
   - Nur Aussagen mit Quelle + Datum (<30 Tage) verwenden
   - Fehlt aktueller Beleg: "Keine aktuellen Daten zu [Thema] gefunden (gepr√ºft am DATUM)"
   - Keine R√ºckgriffe auf alte Werte oder Beispiele

2. ATTRIBUTIVE SPRACHE (zwingend):
   ‚ùå FALSCH: "Russland verletzt Luftraum"
   ‚úÖ RICHTIG: "Laut [NATO/Estland, Datum] wurde Luftraum verletzt. Russland: [nicht kommentiert/dementiert, Datum]"

3. WIDERSPR√úCHE BENENNEN:
   - NATO sagt X, Russland sagt Y ‚Üí beide Aussagen dokumentieren
   - Keine Gl√§ttung, keine "Wahrheit in der Mitte"
   - Fehlende Gegendarstellung explizit benennen

4. NEUTRALIT√ÑT:
   - Keine Begriffe wie "Aggression", "Provokation" ohne Attribution
   - "NATO verst√§rkt Ostflanke" = neutral beschreiben, beide Perspektiven zeigen

5. RATIONALE-FORMAT:
   Score [X] weil:
   - [Aussage 1] (Quelle, Datum)
   - [Aussage 2] (Quelle, Datum)
   - Widerspruch: [NATO sagt X vs. Russland sagt Y]
   - Fehlend: [Keine Daten zu Z gefunden]
""",
    """
INDIKATOREN (Was pr√ºfen?):

‚ñ° Truppenbewegungen (Anzahl, Richtung, Distanz zur Grenze)
‚ñ° Milit√§r√ºbungen (Gr√∂√üe, Dauer, Typ)
‚ñ° Waffensysteme (Neue Stationierungen, nuklearf√§hige Systeme)
‚ñ° Bereitschaftsstufen (Urlaubs-Sperren, Alert-Status)
‚ñ° Direkte Konfrontationen (Luftraum-Vorf√§lle, See-Begegnungen)
‚ñ° Gegendarstellungen (Russische Perspektive zu NATO-Claims)

F√ºr jeden Punkt: Quelle + Datum oder "Keine aktuellen Daten".
"""
]

def build_prompt(date: str, rss_data: str) -> str:
    return f"""
MILIT√ÑRISCHE LAGEBEURTEILUNG - {date}

RSS-FEED-KONTEXT:
{rss_data}

AUFTRAG:
Bewerte die milit√§rische Eskalationslage (1-10) basierend AUSSCHLIESSLICH auf
dem RSS-Feed-Kontext oben.

PFLICHT:
- Jede Aussage mit Quelle + Datum belegen
- Fehlende Daten explizit kennzeichnen: "Keine aktuellen Daten zu [X]"
- Widerspr√ºche zwischen Quellen dokumentieren
- Attributive Sprache verwenden: "Laut [Quelle, Datum]..."

AUSGABE:
- score: [1-10]
- rationale: Begr√ºndung mit Quellen + Datum, Widerspr√ºche, fehlende Daten
"""

def create_agent() -> Agent:
    model = create_research_model()

    return Agent(
        model=model,
        description=DESCRIPTION,
        instructions=INSTRUCTIONS,
        output_schema=DimensionScore,
        markdown=False,
    )

def main():
    """Test the military agent with empty RSS data."""
    from datetime import datetime
    import time

    # Create agent
    agent = create_agent()

    # Test with empty RSS message
    current_date = datetime.now().strftime("%Y-%m-%d")
    empty_rss_message = "RSS-Feeds konnten nicht geladen werden und werden daher ignoriert."

    # Build prompt and get response
    prompt = build_prompt(current_date, empty_rss_message)

    print(f"Military Agent Test - {current_date}")
    print(f"Testing with empty RSS data...")
    print("\n" + "="*50)

    try:
        # Execute agent and measure time
        print(f"üöÄ Starting agent execution...")
        start_time = time.time()
        response = agent.run(prompt)
        end_time = time.time()
        execution_time = end_time - start_time

        print(f"\n‚úÖ Agent Response:")
        print(f"‚è±Ô∏è Execution time: {execution_time:.1f} seconds")
        print(f"Response: {response}")
        print(f"isinstance(response.content, DimensionScore): {isinstance(response.content, DimensionScore)}")
        print(f"Content: {response.content}")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")

if __name__ == "__main__":
    main()